-- -- tables and basic constraints

-- create table district_committee(
--     district_id int primary key,
--     district_name varchar,
--     officer_id int,
--     officer_name varchar,
--     schools_registered int,
--     mdm_budget decimal check (mdm_budget > 0)
-- );

-- create table city_committee(
--     city_id int primary key,
--     district_id int,
--     city_name varchar not null,
--     officer_id int,
--     officer_name varchar,
--     schools_registered int,
--     mdm_budget decimal check (mdm_budget >= 0),
--     constraint fk_city_committee_district_committee foreign key (district_id)
--     references district_committee (district_id)
-- );

-- create type school_category as enum ('govt-aided', 'govt', 'private', 'central');

-- create table school(
--     school_id int primary key,
--     school_name varchar,
--     principal_name varchar,
--     contact_number varchar,
--     email varchar,
--     school_type school_category,
--     city_id int,
--     district_id int,
--     account_number varchar,
--     primary_strength int check (primary_strength >= 0),
--     secondary_strength int check (secondary_strength >= 0),
--     mdm_enrollment bool,
--     constraint fk_school_city_committee foreign key (city_id)
--     references city_committee (city_id),
--     constraint fk_school_district_committee foreign key (district_id)
--     references district_committee (district_id)
-- );

-- create table student(
--     student_id int not null,
--     school_id int not null,
--     student_name varchar not null,
--     standard int check(standard >= 1 and standard <= 12) ,
--     height decimal,
--     weight decimal,
--     mdm_enrollment boolean,
--     primary key (student_id, school_id),
--     constraint fk_student_school foreign key (school_id)
--     references school (school_id)
-- );



-- create table student_attendance(
--     school_id int not null,
--     date date not null,
-- --     primary_attendance int,
--     mdm_secondary_attendance int,
--     mdm_primary_attendance int,
-- --     holiday bool,
--     primary key (school_id, date),
--     constraint fk_student_attendance_school foreign key (school_id)
--     references school (school_id)
-- );

-- create table cook(
--     cook_id int primary key,
--     cook_name varchar,
--     salary decimal check (salary > 0),
--     school_id int,
--     constraint fk_cook_school foreign key (school_id)
--     references school (school_id)
-- );

-- create table payment(
--     transaction_id int primary key,
--     date date not null,
--     school_id int,
--     receiver_account varchar not null,
--     sender_account varchar not null,
--     amount decimal not null check (amount > 0),
--     constraint fk_payment_school foreign key (school_id)
--     references school (school_id),
--     check (sender_account <> receiver_account)
-- );

-- create table inspection_feedback(
--     date date,
--     school_id int,
--     officer_id int,
--     feedback varchar,
--     primary key (date, school_id),
--     constraint fk_inspection_feedback_school foreign key (school_id)
--     references school (school_id)
-- );

-- create table item_prices(
--     item_name varchar,
--     price decimal not null check (price > 0),
--     month int not null check(month >= 1 and month <= 12),
--     year int not null,
--     city_id int,
--     primary key (item_name, month, year, city_id),
--     constraint fk_item_prices_city_committee foreign key (city_id)
--     references city_committee (city_id)
-- );

-- create type grievance_category as enum ('general', 'miscellaneous',
--             'quantity', 'quality', 'food contamination', 'hygiene');

-- create type grievance_status as enum ('resolved', 'progressing', 'new');

-- create table grievances(
--     complaint_id int,
--     school_id int,
--     category grievance_category not null,
--     description varchar,
--     proof varchar,
--     status grievance_status not null,
--     date date,
--     phone_no varchar,
--     actions_taken varchar,
--     primary key (complaint_id, school_id),
--     constraint fk_grievances_school foreign key (school_id)
--     references school (school_id)
-- );

-- create table mdm_school_committee(
--     school_id int primary key,
--     manager_id int,
--     manager_name varchar,
--     -- teacher_id int,
--     -- teacher_name varchar,
--     budget decimal not null check (budget >= 0),
--     primary_enrollment int not null check(primary_enrollment >= 0),
--     secondary_enrollment int not null check(secondary_enrollment >= 0),
--     constraint fk_mdm_committee_school foreign key (school_id)
--     references school (school_id)
-- );

-- create type menu_day as enum ('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun');

-- create table district_static(
--     district_id int,
--     day menu_day,
--     items text[],
--     primary key (district_id, day),
--     constraint fk_district_static_district_committee foreign key(district_id)
--     references district_committee (district_id)
-- );

-- create table daily_stock_usage(
--     school_id int,
--     item_name varchar,
--     item_quantity decimal check (item_quantity >= 0),
--     date date,
--     primary key (school_id, item_name, date),
--     constraint fk_daily_stock_usage_school foreign key (school_id)
--     references school (school_id)
-- --     constraint fk_daily_stock_usage_item_prices foreign key (item_name)
-- --     references item_prices (item_name)
-- );

-- create table stock_left(
--     school_id int,
--     item_name varchar,
--     item_quantity decimal not null check (item_quantity >= 0),
--     month int,
--     year int,
--     primary key (school_id, item_name, month, year),
--     constraint fk_stock_left_school foreign key (school_id)
--     references school (school_id)
-- );

-- now have to create triggers to check extra constraints


-- -- trigger for updating primary strength , seconday strength of school whenever student is added in school
-- create or replace function update_school_strength_trigger_func()
-- returns trigger 
-- language plpgsql
-- as
-- $$
-- begin
-- 	if(TG_OP = "INSERT")
-- 	then
-- 		if(new.mdm_enrollment = t)
-- 		then
-- 			if(new.standard <= 5)
-- 			then
-- 				update mdm_school_committee
-- 				set primary_enrollment = primary_enrollment + 1
-- 				where mdm_school_committee.school_id = new.school_id;
-- 			else 
-- 				update mdm_school_committee
-- 				set secondary_enrollment = secondary_enrollment+1
-- 				where mdm_school_committee.school_id = new.school_id;
-- 			end if;
-- 		end if;

-- 		if(new.standard <= 5)
-- 		then
-- 			update school
-- 			set primary_strength = primary_strength + 1
-- 			where school.school_id = new.school_id;
-- 		else 
-- 			update school
-- 			set secondary_strength = secondary_strength+1
-- 			where school.school_id = new.school_id;
-- 		end if;
		
-- 		return new ;
-- 	elsif (TG_OP = "UPDATE")
-- 	then
	
-- 		if(new.mdm_enrollment != old.mdm_enrollment and new.mdm_enrollment = t)
-- 		then
-- 			if(new.standard <= 5)
-- 			then
-- 				update mdm_school_committee
-- 				set primary_enrollment = primary_enrollment + 1
-- 				where mdm_school_committee.school_id = new.school_id;
-- 			else 
-- 				update mdm_school_committee
-- 				set secondary_enrollment = secondary_enrollment+1
-- 				where mdm_school_committee.school_id = new.school_id;
-- 			end if;
-- 		elsif (new.mdm_enrollment != old.mdm_enrollment and new.mdm_enrollment = f)
-- 		then
-- 			if(new.standard <= 5)
-- 			then
-- 				update mdm_school_committee
-- 				set primary_enrollment = primary_enrollment - 1
-- 				where mdm_school_committee.school_id = new.school_id;
-- 			else 
-- 				update mdm_school_committee
-- 				set secondary_enrollment = secondary_enrollment - 1
-- 				where mdm_school_committee.school_id = new.school_id;
-- 			end if;
-- 		end if;
		
-- 		return new ;
-- 	elsif (TG_OP = "DELETE")
-- 	then
-- 		if(old.mdm_enrollment = t)
-- 		then
-- 			if(old.standard <= 5)
-- 			then
-- 				update mdm_school_committee
-- 				set primary_enrollment = primary_enrollment - 1
-- 				where mdm_school_committee.school_id = new.school_id;
-- 			else 
-- 				update mdm_school_committee
-- 				set secondary_enrollment = secondary_enrollment - 1
-- 				where mdm_school_committee.school_id = new.school_id;
-- 			end if;
-- 		end if;

-- 		if(new.standard <= 5)
-- 		then
-- 			update school
-- 			set primary_strength = primary_strength - 1
-- 			where school.school_id = new.school_id;
-- 		else 
-- 			update school
-- 			set secondary_strength = secondary_strength - 1
-- 			where school.school_id = new.school_id;
-- 		end if;
-- 	end if;
-- end;
-- $$;


-- create trigger update_school_strength_trigger
-- after insert or update or delete on student
-- for each row
-- execute procedure update_school_strength_trigger_func();


-- drop trigger update_school_strength_trigger on student;
-- drop function update_school_strength_trigger_func();



-- --trigger for checking attendance of school < strength and checking the date whenever insertion happens in student_attendance table
-- create or replace function checking_school_mdm_attendance_trigger_func()
-- returns trigger 
-- language plpgsql
-- as
-- $$
-- declare 
-- 	primary_s integer ;
-- 	secondary_s integer ;
-- begin
-- 	select mdm_primary_strength , mdm_secondary_strength into primary_s , secondary_s
-- 	from mdm_school_committee where mdm_school_committee.school_id = new.school_id;
	
-- 	if(new.mdm_primary_attendance <= primary_s and new.mdm_secondary_attendance <= secondary_s and new.date <= current_date)
-- 	then
-- 		return new;
-- 	else
-- 		raise exception 'Incorrect attendance or date insertion/updation in student attendance table';
-- 	end if;
-- end;
-- $$;

-- create trigger checking_school_mdm_attendance_trigger
-- before insert or update on student_attendance
-- for each row
-- execute procedure checking_school_mdm_attendance_trigger_func();



-- alter table mdm_school_committee
-- drop constraint fk_mdm_committee_school,
-- add constraint fk_mdm_committee_school
-- foreign key (school_id)
-- references school(school_id)
-- on delete cascade;
	


-- create or replace function school_mdm_registration_func()
-- returns trigger
-- language plpgsql
-- as
-- $$
-- begin
--    if(TG_OP = "INSERT" and new.mdm_enrollment = t)
--    then
--        update district_committee
--        set schools_registered = schools_registered+1
--        where district_committee.district_id = new.district_id;


--        update city_committee
--        set schools_registered = schools_registered+1
--        where city_committee.city_id = new.city_id;

-- -- 		return new;


--    elsif(TG_OP = "UPDATE" and new.mdm_enrollment <> old.mdm_enrollment and new.mdm_enrollment = t)
--    then
      
--        update district_committee
--        set schools_registered = schools_registered+1
--        where district_committee.district_id = new.district_id;


--        update city_committee
--        set schools_registered = schools_registered+1
--        where city_committee.city_id = new.city_id;
	   
-- -- 	   return new;


--    elsif(TG_OP = "DELETE" and old.mdm_enrollment = t)
--    then


--        update district_committee
--        set schools_registered = schools_registered-1
--        where district_committee.district_id = old.district_id;


--        update city_committee
--        set schools_registered = schools_registered-1
--        where city_committee.city_id = old.city_id;

		
--    end if;
-- end
-- $$;






-- create trigger school_mdm_registration_trigger
-- after insert or update or delete on school
-- for each row
-- execute procedure school_mdm_registration_func();






--update stock left based on daily stock usage
-- CREATE OR REPLACE function update_stock_left_daily ()
-- returns trigger
-- LANGUAGE plpgsql
-- AS
-- $$
-- BEGIN

-- 	if new.item_name in (select item_name from item_prices
--                     	where month = (select extract(MONTH from new.date)) and year = (select EXTRACT(YEAR from new.date))
--                         	and city_id = (select city_id from school where school_id = new.school_id) )
-- 	then
--     	IF (TG_OP = "INSERT")
--     	THEN
--         	update stock_left
--         	set item_quantity = item_quantity- new.item_quantity
--         	where item_name = new.item_name and  month = (select extract(MONTH from new.date)) and year = (select EXTRACT(YEAR from new.date)) and school_id = new.school_id;
--     	ELSIF (TG_OP = "UPDATE")
--     	THEN
--         	if(old.item_quantity <> new.item_quantity)
--         	then
--             	update stock_left
--             	set item_quantity = item_quantity +old.item_quantity -new.item_quantity
--             	where item_name = new.item_name and month = (select extract(MONTH from new.date)) and year = (select EXTRACT(YEAR from new.date)) and school_id = new.school_id;
--         	END IF;
--     	END IF;
-- 	ELSE
--     	raise exception 'Invalid Item Name';
-- 	END IF;
-- 	return new;
-- END;
-- $$;


-- create trigger update_stock_left_daily_trigger
-- before insert or update on daily_stock_usage
-- for each row
-- execute procedure update_stock_left_daily();




-- -- Checking whether insertion or updation in stock left is valid (instead of composite foreign key)
-- CREATE OR REPLACE function checking_item_name_stock_left_daily_trigger_func()
-- returns trigger
-- LANGUAGE plpgsql
-- AS
-- $$
-- BEGIN

-- 	if new.item_name in (select item_name from item_prices
--                     	where month = (select extract(MONTH from new.date)) and year = (select EXTRACT(YEAR from new.date))
--                         	and city_id = (select city_id from school where school_id = new.school_id) )
-- 	then
-- 		return new;
--     else
-- 		raise exception 'Invalid item_name/month/year in while updating stock left';
-- 	end if;
-- end;
-- $$;

-- create trigger checking_item_name_stock_left_daily_trigger
-- before insert or update on stock_left
-- for each row
-- execute procedure checking_item_name_stock_left_daily_trigger_func();


-- alter table inspection_feedback
-- add constraint date_check_constraint CHECK(date <= current_date);


-- alter table grievances
-- add constraint date_check_constraint_greivances CHECK(date <= current_date);

-- alter table grievances
-- add constraint phone_number_constraint_greivances CHECK(phone_no similar to '^[1-9]{1}[0-9]{9}$');


-- alter table school
-- add constraint contact_number_constraint_school CHECK(contact_number similar to '^[1-9]{1}[0-9]{9}$') ;


-- alter table school
-- add constraint email_constraint_school CHECK(email similar to '^[a-zA-Z]+@[a-zA-Z]+[.](org)[.](in)$');


-- alter table school
-- add constraint account_number_constraint_school CHECK(account_number similar to '^[1-9]{1}[0-9]{10}$');


-- alter table city_committee
-- add column total_budget decimal check(total_budget >= 0);

-- alter table district_committee
-- add column total_budget decimal check(total_budget >= 0);



-- budget constraint
-- create or replace function budget_check_func()
-- returns trigger
-- language plpgsql
-- as
-- $$
-- DECLARE
--     new_city_id integer;
--     new_district_id integer;
-- BEGIN
--     select city_id into new_city_id from school where school_id = new.school_id;
--     select district_id into new_district_id from school where school_id = new.school_id;

--     if (TG_OP = "INSERT")
--     THEN
--         IF (new.budget+ (select total_budget from city_committee where city_id = new_city_id)
--         <= (select mdm_budget from city_committee where city_id = new_city_id))
--         then
--             update city_committee
--             set total_budget = new.budget+ total_budget
--             where city_id = new_city_id;
--             return new;
--         else
--             raise exception 'Total Budget is not less than the budget allotted to the city';
--         end if;

--         IF (new.budget+ (select total_budget from district_committee where district_id = new_district_id)
--         <= (select mdm_budget from district_committee where district_id = new_district_id))
--         then
--             update district_committee
--             set total_budget = new.budget+ total_budget
--             where district_id = new_district_id;
--             return new;
--         else
--             raise exception 'Total Budget is not less than the budget allotted to the district';
--         end if;

--         return new;
--     elsif (TG_OP = "UPDATE")
--     THEN
--         IF (new.budget - old.budget + (select total_budget from city_committee where city_id = new_city_id)
--         <= (select mdm_budget from city_committee where city_id = new_city_id))
--         then
--             update city_committee
--             set total_budget = new.budget+ total_budget - old.budget
--             where city_id = new_city_id;
--             return new;
--         else
--             raise exception 'Total Budget is not less than the budget allotted to the city';
--         end if;

--         IF (new.budget - old.budget + (select total_budget from district_committee where district_id = new_district_id)
--         <= (select mdm_budget from district_committee where district_id = new_district_id))
--         then
--             update district_committee
--             set total_budget = new.budget+ total_budget- old.budget
--             where district_id = new_district_id;
--             return new;
--         else
--             raise exception 'Total Budget is not less than the budget allotted to the district';
--         end if;

--         return new;
--     elsif (TG_OP = "DELETE")
--     THEN
--         update city_commitee
--         set total_budget = total_budget-old.budget
--         where city_id = new_city_id;

--         update district_committee
--         set total_budget = total_budget-old.budget
--         where district_id = new_district_id;

--     end if;
-- end;
-- $$;


-- create trigger budget_check_trigger
-- before insert or update or delete on mdm_school_committee 
-- for each row
-- execute procedure budget_check_func();




create table district_committee(
    district_id int primary key,
    district_name varchar,
    officer_id int,
    officer_name varchar,
    schools_registered int,
    mdm_budget decimal check (mdm_budget > 0)
);

alter table mdm_school_committee
drop constraint fk_mdm_committee_school,
add constraint fk_mdm_committee_school
foreign key (school_id)
references school(school_id)
on delete cascade;


drop trigger update_school_strength_trigger on student;
drop function update_school_strength_trigger_func();


create or replace function update_school_strength_trigger_func()
returns trigger 
language plpgsql
as
$$
begin
	if(TG_OP = "INSERT")
	then
		if(new.mdm_enrollment = t)
		then
			if(new.standard <= 5)
			then
				update mdm_school_committee
				set primary_enrollment = primary_enrollment + 1
				where mdm_school_committee.school_id = new.school_id;
			else 
				update mdm_school_committee
				set secondary_enrollment = secondary_enrollment+1
				where mdm_school_committee.school_id = new.school_id;
			end if;
		end if;

		if(new.standard <= 5)
		then
			update school
			set primary_strength = primary_strength + 1
			where school.school_id = new.school_id;
		else 
			update school
			set secondary_strength = secondary_strength+1
			where school.school_id = new.school_id;
		end if;
		
		return new ;
	elsif (TG_OP = "UPDATE")
	then
	
		if(new.mdm_enrollment != old.mdm_enrollment and new.mdm_enrollment = t)
		then
			if(new.standard <= 5)
			then
				update mdm_school_committee
				set primary_enrollment = primary_enrollment + 1
				where mdm_school_committee.school_id = new.school_id;
			else 
				update mdm_school_committee
				set secondary_enrollment = secondary_enrollment+1
				where mdm_school_committee.school_id = new.school_id;
			end if;
		elsif (new.mdm_enrollment != old.mdm_enrollment and new.mdm_enrollment = f)
		then
			if(new.standard <= 5)
			then
				update mdm_school_committee
				set primary_enrollment = primary_enrollment - 1
				where mdm_school_committee.school_id = new.school_id;
			else 
				update mdm_school_committee
				set secondary_enrollment = secondary_enrollment - 1
				where mdm_school_committee.school_id = new.school_id;
			end if;
		end if;
		
		return new ;
	elsif (TG_OP = "DELETE")
	then
		if(old.mdm_enrollment = t)
		then
			if(old.standard <= 5)
			then
				update mdm_school_committee
				set primary_enrollment = primary_enrollment - 1
				where mdm_school_committee.school_id = new.school_id;
			else 
				update mdm_school_committee
				set secondary_enrollment = secondary_enrollment - 1
				where mdm_school_committee.school_id = new.school_id;
			end if;
		end if;

		if(new.standard <= 5)
		then
			update school
			set primary_strength = primary_strength - 1
			where school.school_id = new.school_id;
		else 
			update school
			set secondary_strength = secondary_strength - 1
			where school.school_id = new.school_id;
		end if;
	end if;
end;
$$;

create trigger update_school_strength_trigger
after insert or update or delete on student
for each row
execute procedure update_school_strength_trigger_func();


CREATE OR REPLACE function checking_item_name_stock_left_daily_trigger_func()
returns trigger
LANGUAGE plpgsql
AS
$$
BEGIN

	if new.item_name in (select item_name from item_prices
                    	where month = (select extract(MONTH from new.date)) and year = (select EXTRACT(YEAR from new.date))
                        	and city_id = (select city_id from school where school_id = new.school_id) )
	then
		return new;
    else
		raise exception 'Invalid item_name/month/year in while updating stock left';
	end if;
end;
$$;

create trigger checking_item_name_stock_left_daily_trigger
before insert or update on stock_left
for each row
execute procedure checking_item_name_stock_left_daily_trigger_func()




alter table inspection_feedback
add constraint date_check_constraint CHECK(date <= current_date);


alter table grievances
add constraint date_check_constraint_greivances CHECK(date <= current_date);

alter table grievances
add constraint phone_number_constraint_greivances CHECK(phone_no similar to '^[1-9]{1}[0-9]{9}$');


alter table school
add constraint contact_number_constraint_school CHECK(contact_number similar to '^[1-9]{1}[0-9]{9}$') ;


alter table school
add constraint email_constraint_school CHECK(email similar to '^[a-zA-Z]+@[a-zA-Z]+[.](org)[.](in)$');


alter table school
add constraint account_number_constraint_school CHECK(account_number similar to '^[1-9]{1}[0-9]{10}$');


alter table city_committee
add column total_budget decimal check(total_budget >= 0);

alter table district_committee
add column total_budget decimal check(total_budget >= 0);


create or replace function calc_extra_budget(district_ID integer)
returns table(
    city_id integer,
    schools_enrolled integer,
    budget_alloted integer,
    mdm_expenses integer,
    extra_budget integer
)
language plpgsql
as
$$
begin
return query 
select city_id, schools_registered, mdm_budget, total_budget, mdm_budget-total_budget as extra_budget
from city_committee
where district_id = district_ID;
end;
$$;



create or replace function get_schools_data(district_ID integer, month integer,year integer)
returns table(
    schoolId integer,
    students_registered integer,
    meals_served integer,
    monthly_expenses integer,
    inspection_count integer,
    grievances_count integer
)
language plpgsql
as
$$
declare
    school_num integer;
begin
    for school_num in (Select school_id from school where district_id = district_ID)
    loop
        return query
        select * from school_dashboard(school_num, month, year);
    end loop;
end;
$$;


create or replace function school_dashboard(school_ID integer,monthNum integer,yearNum integer)
returns table(
    schoolId integer,
    students_registered integer,
    meals_served integer,
    monthly_expenses integer,
    inspection_count integer,
    grievances_count integer
)
language plpgsql
as
$$
begin
return query
select m.school_id, m.primary_enrollment+ m.secondary_enrollment as students_enrolled, t1.total_enrolled, t2.total_cook_salary+ t2.actual_food_exepnse as monthly_expenses,t3.count as inspection_count, t4.count as grivances_count
from mdm_school_committee m,
(
    select a.school_id, sum(a.mdm_primary_attendance + a.mdm_secondary_attendance) as total_enrolled
    from student_attendance a
    group by school_id
    having (extract (month from a.date) = monthNum) and a.school_id = school_ID and extract (year from date) = yearNum
) as t1,
(
    select * from school_monthly_expenses_func(school_ID, monthNum,yearNum )
) as t2,
(   
    select count(date)
    from inspection_feedback
    group by school_id
    having school_id = school_ID and extract (month from date) = monthNum and extract (year from date) = yearNum
) as t3,
(
    select count(complaint_id)
    from grievances
    group by school_id
    having school_id = school_ID and extract (month from date) = monthNum and extract (year from date) = yearNum
) as t4
where m.school_id = school_ID and m.school_id = t1.school_id and t1.school_id = t2.school_id and t2.school_id = t3.school_id;
end;
$$;


create role school





create or replace function change_MDM_enrollment()
returns trigger
language plpgsql
as
$$
begin
	if(new.mdm_enrollment = f and new.mdm_enrollment <> old.mdm_enrollment)
	then
		DELETE from school
		where school_id = new.school_id;
	end if;
end;
$$;


create trigger deregister_school
after update of mdm_enrollment on school
for each row
execute procedure change_MDM_enrollment();


alter table mdm_school_committee
drop constraint fk_mdm_committee_school,
add constraint fk_mdm_committee_school
foreign key (school_id)
references school(school_id)
on delete cascade;

alter table student
drop constraint fk_student_school,
add constraint fk_student_school
foreign key (school_id)
references school(school_id)
on delete cascade;


alter table student_attendance
drop constraint fk_student_attendance_school,
add constraint fk_student_attendance_school
foreign key (school_id)
references school(school_id)
on delete cascade;

alter table cook
drop constraint fk_cook_school,
add constraint fk_cook_school
foreign key (school_id)
references school(school_id)
on delete cascade;


-- alter table payment
-- drop constraint fk_payment_school,
-- add constraint fk_payment_school
-- foreign key (school_id)
-- references school(school_id)
-- on delete cascade;


alter table inspection_feedback
drop constraint fk_inspection_feedback_school,
add constraint fk_inspection_feedback_school
foreign key (school_id)
references school(school_id)
on delete cascade;


alter table grievances
drop constraint fk_grievances_school,
add constraint fk_grievances_school
foreign key (school_id)
references school(school_id)
on delete cascade;


alter table daily_stock_usage
drop constraint fk_daily_stock_usage_school,
add constraint fk_daily_stock_usage_school
foreign key (school_id)
references school(school_id)
on delete cascade;


alter table stock_left
drop constraint fk_stock_left_school,
add constraint fk_stock_left_school
foreign key (school_id)
references school(school_id)
on delete cascade;


create role school_role;
create role city_role;
create role district_role;

grant select, update (principal_name,contact_number,email) on school to school_role;
grant select, insert,update (student_name , standard , height , weight , mdm_enrollment),delete on student to school_role;
grant select, insert,update on student_attendance to school_role;
grant select on mdm_school_committee to school_role;
grant select, insert,update,delete on cook to school_role;
grant select, insert,update on daily_stock_usage to school_role;
grant select, insert,update on stock_left to school_role;
grant select, insert,update on grievances to school_role;
grant select on district_static to school_role;
grant select on item_prices to school_role;
grant select on inspection_feedback to school_role;
grant select on city_committee to school_role;
grant select on district_committee to school_role;



grant select, insert on school to city_role;
grant select on student to city_role;
grant select on student_attendance to city_role;
grant select,insert,update(manager_id , manager_name , budget )
 on mdm_school_committee to city_role;
grant select on cook to city_role;
grant select on daily_stock_usage to city_role;
grant select on stock_left to city_role;
grant select,update (status, actions_taken) on grievances to city_role;
grant select on district_static to city_role;
grant select,insert,update on item_prices to city_role;
grant select on inspection_feedback to city_role;
grant select on city_committee to city_role;
grant select on district_committee to city_role;


grant select, insert,update(mdm_enrollment) on school to district_role;
grant select on student to district_role;
grant select on student_attendance to district_role;
grant select,insert,update(manager_id , manager_name , budget )
 on mdm_school_committee to district_role;
grant select on cook to district_role;
grant select on daily_stock_usage to district_role;
grant select on stock_left to district_role;
grant select,update (status, actions_taken) on grievances to district_role;
grant select,insert,update on district_static to district_role;
grant select on item_prices to district_role;
grant select,insert on inspection_feedback to district_role;
grant select,insert,update on district_committee to district_role;
grant select on district_committee to district_role;


















CREATE VIEW bmi_calculation AS 
(
	SELECT student_id , student_name ,(weight / (height *  height)) as BMI , 
   CASE 
	WHEN (weight / (height *  height)) < 18.5 THEN 'underweight'
	WHEN (weight / (height *  height)) > 18.5 AND (weight / (height *  height)) < 24.9 THEN 'healthy-weight'
	WHEN (weight / (height *  height)) > 25 AND (weight / (height *  height)) < 29.9 THEN 'overweight'
	WHEN (weight / (height *  height)) > 30 THEN 'obese'
  END category
	FROM Student
);


CREATE VIEW city_officer_view AS
(
	SELECT school_id, manager_id, manager_name, budget,primary_enrollment+secondary_enrollment as students_enrolled, t1.count as grievances_registered
	from mdm_school_committee, (select count(complaint_id) from grievances) as t1
);


CREATE VIEW school_attendance AS
(
	SELECT t1.school_id,t1.school_name, t1.primary_percent *100 as primary_attendance,  t1.secondary_percent*100 as secondary_attendance
	FROM 
 	(SELECT s.school_id, s.school_name , AVG(a.mdm_primary_attendance)/sum(primary_strength) as primary_percent , AVG(a.mdm_secondary_attendance)/sum(s.secondary_strength) as secondary_percent
	FROM student_attendance a, school s
	where (extract (month from a.date) = extract(month from CURRENT_DATE) and extract(year from a.date) = extract (year from CURRENT_DATE))
	group by (s.school_id)) as t1
);






SELECT 	s.school_name,
mdm.manager_name, c.officer_name, d.officer_name
FROM 		school as s, city_committee as c,
district_committee as d, mdm_school_committee as mdm
WHERE 	s.school_id = mdm.school_id and s.city_id = c.city_id
and c.district_id = d.district_id ;


SELECT 	s.school_id,
count(c.cook_id) / (s.primary_strength + s.secondary_strength) as ratio
FROM 		school s, cook c
GROUP BY 	s.school_id,c.school_id
having count(c.cook_id) / (s.primary_strength + s.secondary_strength) > 0.01 AND s.school_id = c.school_id



SELECT s.district_id , d.district_name , 
((d.schools_registered / COUNT(s.school_id))*100) AS percentage
FROM District_Committee d , School s
GROUP BY s.district_id 
HAVING s.district_id = d.district_id AND (s.mdm_enrollment = true);


SELECT d.district_id,
((d.schools_registered / t1.count)*100) AS percentage
from district_committee d,
(
	select district_id, count(s.school_id) as count
	from school s
	group by(district_id)
) as t1
where d.district_id = t1.district_id;























-- tables and basic constraints

create table district_committee(
    district_id int primary key,
    district_name varchar,
    officer_id int,
    officer_name varchar,
    schools_registered int,
    mdm_budget decimal check (mdm_budget > 0)
);

create type school_category as enum ('govt-aided', 'govt', 'private', 'central');

create table school(
    school_id int primary key,
    school_name varchar,
    principal_name varchar,
    contact_number varchar,
    email varchar,
    school_type school_category,
    city_id int,
    district_id int,
    account_number varchar,
    primary_strength int check (primary_strength >= 0),
    secondary_strength int check (secondary_strength >= 0),
    mdm_enrollment bool,
    constraint fk_school_city_committee foreign key (city_id)
    references city_committee (city_id),
    constraint fk_school_district_committee foreign key (district_id)
    references district_committee (district_id)
);

create table student(
    student_id int not null,
    school_id int not null,
    student_name varchar not null,
    standard int check(standard >= 1 and standard <= 12) ,
    height decimal,
    weight decimal,
    mdm_enrollment boolean,
    primary key (student_id, school_id),
    constraint fk_student_school foreign key (school_id)
    references school (school_id)
);

create table city_committee(
    city_id int primary key,
    district_id int,
    city_name varchar not null,
    officer_id int,
    officer_name varchar,
    schools_registered int,
    mdm_budget decimal check (mdm_budget >= 0),
    constraint fk_city_committee_district_committee foreign key (district_id)
    references district_committee (district_id)
);

create table student_attendance(
    school_id int not null,
    date date not null,
    mdm_primary_attendance int,
    mdm_secondary_attendance int,
    primary key (school_id, date),
    constraint fk_student_attendance_school foreign key (school_id)
    references school (school_id)
);

create table cook(
    cook_id int primary key,
    cook_name varchar,
    salary decimal check (salary > 0),
    school_id int,
    constraint fk_cook_school foreign key (school_id)
    references school (school_id)
);

create table payment(
    transaction_id int primary key,
    date date not null,
    school_id int,
    receiver_account varchar not null,
    sender_account varchar not null,
    amount decimal not null check (amount > 0),
    constraint fk_payment_school foreign key (school_id)
    references school (school_id),
    check (sender_account <> receiver_account)
);

create table inspection_feedback(
    date date,
    school_id int,
    officer_id int,
    feedback varchar,
    primary key (date, school_id),
    constraint fk_inspection_feedback_school foreign key (school_id)
    references school (school_id)
);

create table item_prices(
    item_name varchar,
    price decimal not null check (price > 0),
    month int not null check (month >= 1 and month <= 12),
    year int not null,
    city_id int,
    primary key (item_name, month, year, city_id),
    constraint fk_item_prices_city_committee foreign key (city_id)
    references city_committee (city_id)
);

create type grievance_category as enum ('general', 'miscellaneous',
            'quantity', 'quality', 'food contamination', 'hygiene');

create type grievance_status as enum ('resolved', 'progressing', 'new');

create table grievances(
    complaint_id int,
    school_id int,
    category grievance_category not null,
    description varchar,
    proof varchar,
    status grievance_status not null,
    date date,
    phone_no varchar,
    actions_taken varchar,
    primary key (complaint_id, school_id),
    constraint fk_grievances_school foreign key (school_id)
    references school (school_id)
);

create table mdm_school_committee(
    school_id int primary key,
    manager_id int,
    manager_name varchar,
    -- teacher_id int,
    -- teacher_name varchar,
    budget decimal not null check (budget >= 0),
    primary_enrollment int not null check (primary_enrollment >= 0),
    secondary_enrollment int not null check (secondary_enrollment >= 0),
    constraint fk_mdm_committee_school foreign key (school_id)
    references school (school_id)
);

create type menu_day as enum ('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun');

create table district_static(
    district_id int,
    day menu_day,
    items text[],
    primary key (district_id, day),
    constraint fk_district_static_district_committee foreign key(district_id)
    references district_committee (district_id)
);

create table daily_stock_usage(
    school_id int,
    item_name varchar,
    item_quantity decimal check (item_quantity >= 0),
    date date,
    primary key (school_id, item_name, date),
    constraint fk_daily_stock_usage_school foreign key (school_id)
    references school (school_id)
);

create table stock_left(
    school_id int,
    item_name varchar,
    item_quantity decimal not null check (item_quantity >= 0),
    month int,
    year int,
    primary key (school_id, item_name, month, year),
    constraint fk_stock_left_school foreign key (school_id)
    references school (school_id)
);

-- now have to create triggers to check extra constraints

create or replace function constraint_attendance()
returns trigger
language plpgsql
as $$
begin
    if (new.mdm_primary_attendance >= (select primary_enrollment from mdm_school_committee where school_id = new.school_id) or
        new.mdm_secondary_attendance >= (select secondary_enrollment from mdm_school_committee where school_id = new.school_id))
    then
        raise notice 'daily attendance more then max strength';
    end if;
    return new;
end;
$$;

create or replace trigger constraint_attendance_trigger
before insert or update 
of 
on student_attendance
for each row
execute procedure constraint_attendance();








create or replace function update_school_strength_trigger_func()
returns trigger 
language plpgsql
as
$$
begin
	if(new.mdm_enrollment = t)
	then
		if(new.standard <= 5)
		then
			update mdm_school_committee
			set primary_enrollment = primary_enrollment + 1
			where mdm_school_committee.school_id = new.school_id;
		else 
			update mdm_school_committee
			set secondary_enrollment = secondary_enrollment+1
			where mdm_school_committee.school_id = new.school_id;
		end if;
	end if;
	
	if(new.standard <= 5)
	then
		update school
		set primary_strength = primary_strength + 1
		where school.school_id = new.school_id;
	else 
		update school
		set secondary_strength = secondary_strength+1
		where school.school_id = new.school_id;
	end if;
	
	return new ;
end;
$$;


create trigger update_school_strength_trigger
after insert on student
for each row
execute procedure update_school_strength_trigger_func();


create or replace function school_mdm_registration_func()
returns trigger
language plpgsql
as
$$
begin
    if(TG_OP ="INSERT" and new.mdm_enrollment = t)
    then
        update district_committee
        set schools_registered = schools_registered+1
        where district_committee.district_id = new.district_id;

        update city_committee
        set schools_registered = schools_registered+1
        where city_committee.city_id = new.city_id;


    elsif(TG_OP = "UPDATE" and new.mdm_enrollment <> old.mdm_enrollment and new.mdm_enrollment = t)
    then
        
        update district_committee
        set schools_registered = schools_registered+1
        where district_committee.district_id = new.district_id;

        update city_committee
        set schools_registered = schools_registered+1
        where city_committee.city_id = new.city_id;

    elsif(TG_OP = "DELETE" and old.mdm_enrollment = t)
    then

        update district_committee
        set schools_registered = schools_registered-1
        where district_committee.district_id = old.district_id;

        update city_committee
        set schools_registered = schools_registered-1
        where city_committee.city_id = old.city_id;

    end if;
    return new;
end;
$$;


create trigger school_mdm_registration_trigger
after insert or update or delete on school
for each row
execute procedure school_mdm_registration_func();


drop function school_mdm_registeration_func();
drop trigger school_mdm_registeration_trigger on school;




create or replace function checking_school_mdm_attendance_trigger_func()
returns trigger 
language plpgsql
as
$$
declare 
	primary_s integer ;
	secondary_s integer ;
begin
	select mdm_primary_strength , mdm_secondary_strength into primary_s , secondary_s
	from mdm_school_committee where mdm_school_committee.school_id = new.school_id;
	
	if(new.mdm_primary_attendance <= primary_s and new.mdm_secondary_attendance <= secondary_s and new.date <= current_date)
	then
		return new;
	else
		raise exception 'Incorrect attendance or date insertion/updation in student attendance table';
	end if;
end;
$$;

create trigger checking_school_mdm_attendance_trigger
before insert or update on student_attendance
for each row
execute procedure checking_school_mdm_attendance_trigger_func();


CREATE OR REPLACE function update_stock_left_daily ()
returns trigger
LANGUAGE plpgsql
AS
$$
BEGIN

    if new.item_name in (select item_name from item_prices
                        where month = (select extract(MONTH from new.date)) and year = (select EXTRACT(YEAR from new.date))
                            and city_id = (select city_id from school where school_id = new.school_id) )
    then
        IF (TG_OP = "INSERT")
        THEN
            update stock_left
            set item_quantity = item_quantity- new.item_quantity
            where item_name = new.item_name and  month = (select extract(MONTH from new.date)) and year = (select EXTRACT(YEAR from new.date)) and school_id = new.school_id;
        ELSIF (TG_OP = "UPDATE")
        THEN
            if(old.item_quantity <> new.item_quantity)
            then
                update stock_left
                set item_quantity = item_quantity +old.item_quantity -new.item_quantity
                where item_name = new.item_name and month = (select extract(MONTH from new.date)) and year = (select EXTRACT(YEAR from new.date)) and school_id = new.school_id;
            END IF;
        END IF;
    ELSE
        raise exception 'Invalid Item Name';
    END IF;
    return new;
END;
$$;

create trigger update_stock_left_daily_trigger
before insert or update on daily_stock_usage
for each row
execute procedure update_stock_left_daily()


create or replace function budget_check_func()
returns trigger
language plpgsql
as
$$
DECLARE
    new_city_id integer;
    new_district_id integer;
BEGIN
    select city_id into new_city_id from school where school_id = new.school_id;
    select district_id into new_district_id from school where school_id = new.school_id;

    if (TG_OP = "INSERT")
    THEN
        IF (new.budget+ (select total_budget from city_committee where city_id = new_city_id)
        <= (select mdm_budget from city_committee where city_id = new_city_id))
        then
            update city_committee
            set total_budget = new.budget+ total_budget
            where city_id = new_city_id;
            return new;
        else
            raise exception 'Total Budget is not less than the budget allotted to the city';
        end if;

        IF (new.budget+ (select total_budget from district_committee where district_id = new_district_id)
        <= (select mdm_budget from district_committee where district_id = new_district_id))
        then
            update district_committee
            set total_budget = new.budget+ total_budget
            where district_id = new_district_id;
            return new;
        else
            raise exception 'Total Budget is not less than the budget allotted to the district';
        end if;

        return new;
    elsif (TG_OP = "UPDATE")
    THEN
        IF (new.budget - old.budget + (select total_budget from city_committee where city_id = new_city_id)
        <= (select mdm_budget from city_committee where city_id = new_city_id))
        then
            update city_committee
            set total_budget = new.budget+ total_budget - old.budget
            where city_id = new_city_id;
            return new;
        else
            raise exception 'Total Budget is not less than the budget allotted to the city';
        end if;

        IF (new.budget - old.budget + (select total_budget from district_committee where district_id = new_district_id)
        <= (select mdm_budget from district_committee where district_id = new_district_id))
        then
            update district_committee
            set total_budget = new.budget+ total_budget- old.budget
            where district_id = new_district_id;
            return new;
        else
            raise exception 'Total Budget is not less than the budget allotted to the district';
        end if;

        return new;
    elsif (TG_OP = "DELETE")
    THEN
        update city_commitee
        set total_budget = total_budget-old.budget
        where city_id = new_city_id;

        update district_committee
        set total_budget = total_budget-old.budget
        where district_id = new_district_id;

    end if;
end;
$$;


create trigger budget_check_trigger
before insert of budget or update of budget or delete on mdm_school_committee
for each row
execute procedure budget_check_func()


